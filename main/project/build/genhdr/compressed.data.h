#define MP_MAX_UNCOMPRESSED_TEXT_LEN (68)
MP_COMPRESSED_DATA("can'\364argumen\364objec\364no\364functio\356conver\364mus\364supporte\344assignmen\364ar\347keywor\344generato\362t\357multipl\345comple\370invali\344positiona\354numbe\362fo\362nam\345b\345nonloca\354o\346require\344wron\347doesn'\364in\364missin\347typ\345\341synta\370issubclass(\251afte\362empt\371foun\344i\356allocatio\356expressio\356identifie\362tuple/lis\364unexpecte\344argument\363redefine\344zer\357instanc\345n\357overflo\367sequenc\345defaul\364expect\363failed\254ha\363indice\363outsid\345suppor\364to\357divid\345impor\364inden\364lengt\350memor\371value\363a\356clas\363floa\364inde\370isn'\364oute\362rang\345tupl\345'%q\247fro\355ite\355lis\364lon\347sel\346wit\350\262ba\344ou\364*\252*\370a\363b\371i\363o\362\261#%\344%\361%\365'break'/'continue\247'except\247'yield\247\2520.\260\2633-ar\3473\266<\275>\275BaseExceptio\356GeneratorExi\364LH\323Na\316Non\345StopIteratio\356__init__(\251acceptabl\345activ\345allocatin\347alread\371an\344an\371arg\363assig\356attribut\345attribute\363bas\345base\363befor\345bi\347bindin\347buffe\362buil\344bytecod\345byte\363callabl\345characte\362")
MP_MATCH_COMPRESSED("'break'/'continue' outside loop", "\377\332\265loop")
MP_MATCH_COMPRESSED("'yield' outside function", "\377\334\265\204")
MP_MATCH_COMPRESSED("* arg after **", "\377\335\211\240\320")
MP_MATCH_COMPRESSED("*x must be assignment target", "\377\321\206\224\210target")
MP_MATCH_COMPRESSED("0.0 to a complex power", "\377\336\214\235\216power")
MP_MATCH_COMPRESSED("3-arg pow() not supported", "\377\340pow()\203\207")
MP_MATCH_COMPRESSED("LHS of keyword arg must be an id", "\377\346\226\212\211\206\224\276id")
MP_MATCH_COMPRESSED("__init__() should return None", "\377\352should return\350")
MP_MATCH_COMPRESSED("argument name reused", "\377\201\223reused")
MP_MATCH_COMPRESSED("argument num/types mismatch", "\377\201num/types mismatch")
MP_MATCH_COMPRESSED("attributes not supported yet", "\377\364\203\207yet")
MP_MATCH_COMPRESSED("bad format string", "\377\316format string")
MP_MATCH_COMPRESSED("bad typecode", "\377\316typecode")
MP_MATCH_COMPRESSED("bytecode overflow", "\377\374\256")
MP_MATCH_COMPRESSED("can't assign to expression", "\377\200\362\214\245")
MP_MATCH_COMPRESSED("can't convert NaN to int", "\377\200\205\347\214\232")
MP_MATCH_COMPRESSED("can't convert inf to int", "\377\200\205inf\214\232")
MP_MATCH_COMPRESSED("can't convert to complex", "\377\200\205\214\216")
MP_MATCH_COMPRESSED("can't convert to float", "\377\200\205\214\300")
MP_MATCH_COMPRESSED("can't convert to int", "\377\200\205\214\232")
MP_MATCH_COMPRESSED("can't convert to str implicitly", "\377\200\205\214str implicitly")
MP_MATCH_COMPRESSED("can't create instance", "\377\200create\254")
MP_MATCH_COMPRESSED("can't declare nonlocal in outer code", "\377\200declare\225\243\303code")
MP_MATCH_COMPRESSED("can't delete expression", "\377\200delete\245")
MP_MATCH_COMPRESSED("can't import name %q", "\377\200\271\223\330")
MP_MATCH_COMPRESSED("can't perform relative import", "\377\200perform relative\271")
MP_MATCH_COMPRESSED("can't send non-None value to a just-started generator", "\377\200send non-None value\214\235just-started\213")
MP_MATCH_COMPRESSED("can't truncate-divide a complex number", "\377\200truncate-divide\235\216\221")
MP_MATCH_COMPRESSED("chr() arg not in range(256)", "\377chr()\211\203\243range(256)")
MP_MATCH_COMPRESSED("complex divide by zero", "\377\216\270\323\253")
MP_MATCH_COMPRESSED("default 'except' must be last", "\377\260\333\206\224last")
MP_MATCH_COMPRESSED("dict update sequence has wrong length", "\377dict update\257\263\230\273")
MP_MATCH_COMPRESSED("divide by zero", "\377\270\323\253")
MP_MATCH_COMPRESSED("empty separator", "\377\241separator")
MP_MATCH_COMPRESSED("exceptions must derive from BaseException", "\377exceptions\206derive\307\344")
MP_MATCH_COMPRESSED("expected tuple/list", "\377expected\247")
MP_MATCH_COMPRESSED("float too big", "\377\300\267\370")
MP_MATCH_COMPRESSED("function got multiple values for argument '%q'", "\377\204got\215\275\222\201\306")
MP_MATCH_COMPRESSED("function missing keyword-only argument", "\377\204\233keyword-only\201")
MP_MATCH_COMPRESSED("function missing required keyword argument '%q'", "\377\204\233\227\212\201\306")
MP_MATCH_COMPRESSED("function missing required positional argument #%d", "\377\204\233\227\220\201\327")
MP_MATCH_COMPRESSED("generator already executing", "\377\213\356executing")
MP_MATCH_COMPRESSED("generator ignored GeneratorExit", "\377\213ignored\345")
MP_MATCH_COMPRESSED("generator raised StopIteration", "\377\213raised\351")
MP_MATCH_COMPRESSED("identifier redefined as global", "\377\246\252\322global")
MP_MATCH_COMPRESSED("identifier redefined as nonlocal", "\377\246\252\322\225")
MP_MATCH_COMPRESSED("index out of range", "\377\301\317\226\304")
MP_MATCH_COMPRESSED("indices must be integers", "\377\264\206\224integers")
MP_MATCH_COMPRESSED("int() arg 2 must be >= 2 and <= 36", "\377int()\211\315\206\224\343\315\357\342\341")
MP_MATCH_COMPRESSED("invalid micropython decorator", "\377\217micropython decorator")
MP_MATCH_COMPRESSED("invalid syntax", "\377\217\236")
MP_MATCH_COMPRESSED("invalid syntax for integer", "\377\217\236\222integer")
MP_MATCH_COMPRESSED("invalid syntax for number", "\377\217\236\222\221")
MP_MATCH_COMPRESSED("issubclass() arg 1 must be a class", "\377\237\211\326\206\224\235\277")
MP_MATCH_COMPRESSED("issubclass() arg 2 must be a class or a tuple of classes", "\377\237\211\315\206\224\235\277\325\235\305\226classes")
MP_MATCH_COMPRESSED("join expects a list of str/bytes objects consistent with self object", "\377join\261\235\311\226str/bytes objects consistent\314\313\202")
MP_MATCH_COMPRESSED("local variable referenced before assignment", "\377local variable referenced\367\210")
MP_MATCH_COMPRESSED("long int not supported in this build", "\377\312\232\203\207\243this\373")
MP_MATCH_COMPRESSED("memory allocation failed, allocating %u bytes", "\377\274\244\262\355\331\375")
MP_MATCH_COMPRESSED("memory allocation failed, heap is locked", "\377\274\244\262heap\324locked")
MP_MATCH_COMPRESSED("module not found", "\377module\203\242")
MP_MATCH_COMPRESSED("multiple *x in assignment", "\377\215\321\243\210")
MP_MATCH_COMPRESSED("multiple bases have instance lay-out conflict", "\377\215\366have\254lay-out conflict")
MP_MATCH_COMPRESSED("multiple inheritance not supported", "\377\215inheritance\203\207")
MP_MATCH_COMPRESSED("must use keyword argument for key function", "\377\206use\212\201\222key\204")
MP_MATCH_COMPRESSED("name not defined", "\377\223\203defined")
MP_MATCH_COMPRESSED("name too long", "\377\223\267\312")
MP_MATCH_COMPRESSED("negative shift count", "negative shift count")
MP_MATCH_COMPRESSED("no active exception to reraise", "\377\255\354exception\214reraise")
MP_MATCH_COMPRESSED("no binding for nonlocal found", "\377\255\371\222\225\242")
MP_MATCH_COMPRESSED("no such attribute", "\377\255such\363")
MP_MATCH_COMPRESSED("non-default argument follows default argument", "\377non-default\201follows\260\201")
MP_MATCH_COMPRESSED("object doesn't support item assignment", "\377\202\231\266\310\210")
MP_MATCH_COMPRESSED("object doesn't support item deletion", "\377\202\231\266\310deletion")
MP_MATCH_COMPRESSED("object has no len", "\377\202\263\255len")
MP_MATCH_COMPRESSED("object isn't subscriptable", "\377\202\302subscriptable")
MP_MATCH_COMPRESSED("object not an iterator", "\377\202\203\276iterator")
MP_MATCH_COMPRESSED("object not callable", "\377\202\203\376")
MP_MATCH_COMPRESSED("object not in sequence", "\377\202\203\243\257")
MP_MATCH_COMPRESSED("object not iterable", "\377\202\203iterable")
MP_MATCH_COMPRESSED("object with buffer protocol required", "\377\202\314\372protocol\227")
MP_MATCH_COMPRESSED("opcode", "opcode")
MP_MATCH_COMPRESSED("ord expects a character", "\377ord\261\235\377")
MP_MATCH_COMPRESSED("pop from empty list", "\377pop\307\241\311")
MP_MATCH_COMPRESSED("popitem(): dictionary is empty", "\377popitem(): dictionary\324\241")
MP_MATCH_COMPRESSED("positional arg after **", "\377\220\211\240\320")
MP_MATCH_COMPRESSED("positional arg after keyword arg", "\377\220\211\240\212\211")
MP_MATCH_COMPRESSED("rsplit(None,n)", "rsplit(None,n)")
MP_MATCH_COMPRESSED("small int overflow", "\377small\232\256")
MP_MATCH_COMPRESSED("start/end indices", "\377start/end\264")
MP_MATCH_COMPRESSED("stream operation not supported", "\377stream operation\203\207")
MP_MATCH_COMPRESSED("substring not found", "\377substring\203\242")
MP_MATCH_COMPRESSED("super() can't find self", "\377super()\200find\313")
MP_MATCH_COMPRESSED("too many args", "\377\267many\361")
MP_MATCH_COMPRESSED("tuple index out of range", "\377\305\301\317\226\304")
MP_MATCH_COMPRESSED("tuple/list has wrong length", "\377\247\263\230\273")
MP_MATCH_COMPRESSED("type isn't an acceptable base type", "\377\234\302\276\353\365\234")
MP_MATCH_COMPRESSED("type takes 1 or 3 arguments", "\377\234takes\326\325\337\251")
MP_MATCH_COMPRESSED("unexpected indent", "\377\250\272")
MP_MATCH_COMPRESSED("unexpected keyword argument", "\377\250\212\201")
MP_MATCH_COMPRESSED("unicode name escapes", "\377unicode\223escapes")
MP_MATCH_COMPRESSED("unindent doesn't match any outer indent level", "\377unindent\231match\360\303\272level")
MP_MATCH_COMPRESSED("unsupported type for operator", "\377unsupported\234\222operator")
MP_MATCH_COMPRESSED("wrong number of arguments", "\377\230\221\226\251")
MP_MATCH_COMPRESSED("wrong number of values to unpack", "\377\230\221\226\275\214unpack")
MP_MATCH_COMPRESSED("zero step", "\377\253step")
// Total input length:      3012
// Total compressed length: 1298
// Total data length:       1109
// Predicted saving:        605

// gzip length:             1829
// Percentage of gzip:      131.6%
// zlib length:             1817
// Percentage of zlib:      132.5%
